#!/usr/env/bin roseus
(require :fetch-interface "package://fetcheus/fetch-interface.l")
(load "package://jsk_maps/src/change-floor.l")
(load "package://jsk_fetch_startup/euslisp/navigation-utils.l")
(unless (boundp '*elevator-action*) (load "package://jsk_2020_11_fetch_and_spot_go_to_kitchen_car/euslisp/elevator-action.l"))
(unless (boundp '*utils*) (load "package://jsk_2020_11_fetch_and_spot_go_to_kitchen_car/euslisp/utils.l"))

(setq *go-to-office* t)

(ros::load-ros-manifest "geometry_msgs")
(ros::load-ros-manifest "switchbot_ros")
(ros::advertise "/initialpose" geometry_msgs::PoseWithCovarianceStamped 1)

;; auto-door-coords
(setq *3f-auto-door-1* (make-coords :pos #f(10574 -28000 0) :rpy (float-vector 0 0 0)))
(setq *3f-auto-door-2* (make-coords :pos #f(20473 -32738 0) :rpy (float-vector 0 0 0)))
(setq *3f-auto-door-3* (make-coords :pos #f(22627 -32752 0) :rpy (float-vector pi 0 0)))
(setq *3f-auto-door-4* (make-coords :pos #f(12574 -28000 0) :rpy (float-vector pi 0 0)))

;; inv auto-door-coords
(setq *3f-auto-door-1-inv* (make-coords :pos #f(10574 -28000 0) :rpy (float-vector pi 0 0)))
(setq *3f-auto-door-2-inv* (make-coords :pos #f(20473 -32738 0) :rpy (float-vector pi 0 0)))
(setq *3f-auto-door-3-inv* (make-coords :pos #f(22627 -32752 0) :rpy (float-vector 0 0 0)))
(setq *3f-auto-door-4-inv* (make-coords :pos #f(12574 -28000 0) :rpy (float-vector 0 0 0)))

;; auto-door-coords at rails
(setq *3f-auto-door-2-force* (make-coords :pos #f(21822.95 -32752.961 0) :rpy #f(0.116 0 0)))
(setq *3f-auto-door-3-force* (make-coords :pos #f(21825.617 -32760.204 0) :rpy #f(3.04 0 0)))

;; define movements
(defun go-to-3f-auto-door(door)
  (send *ri* :clear-costmap)
  (send *ri* :speak-jp (concatenate string (string door) "番目の自動ドアに向かいます") :wait t)  
  (cond ((= door 1)
		 (send *ri* :move-to *3f-auto-door-1* :frame-id "/map"))
		((= door 2)
		 (change-dynamic-param :local-inflation-radius 0.3 :global-inflation-radius 0.3)
		 (send *ri* :move-to *3f-auto-door-2* :frame-id "/map")
		 (change-dynamic-param))
		((= door 3)
		 (send *ri* :move-to *3f-auto-door-3* :frame-id "/map"))
		((= door 4)
		 (change-dynamic-param :local-inflation-radius 0.3 :global-inflation-radius 0.3)
		 (send *ri* :move-to *3f-auto-door-4* :frame-id "/map")
		 (change-dynamic-param)))
  )

(defun move-torso-and-head(max-torso min-torso head-left head-right times msec)
  (dotimes (i times)
    (send *fetch* :torso_lift_joint :joint-angle max-torso)
    (send *fetch* :head_pan_joint :joint-angle 60)
    (send *ri* :angle-vector (send *fetch* :angle-vector) msec)
    (unix:sleep (/ msec 1000))
    (send *fetch* :torso_lift_joint :joint-angle min-torso)
    (send *fetch* :head_pan_joint :joint-angle -60)
    (send *ri* :angle-vector (send *fetch* :angle-vector) msec)
    (unix:sleep (/ msec 1000))))

(defun move-torso-and-head-and-autodoor-open(nickname)
  (move-torso-and-head 280 40 -60 60 1 3000)
  (switchbot-topic nickname "off")
  (move-torso-and-head 280 40 -60 60 2 3000)
  (send *ri* :angle-vector (send *fetch* :reset-pose) 2000))

(defun go-through-3f-auto-door()
  (send *ri* :speak-jp "一気に進みます" :wait t)
  (change-dynamic-param :local-inflation-radius 0.3 :global-inflation-radius 0.3 :max-vel-x 0.6 :min-vel-x 0.3)
  (send *ri* :go-pos 2.5 0 0)
  (change-dynamic-param)
  )

(defun turn-to-the-target(target-world-pos vel-rate delta-th)
  (let (current-world-pos target-theta-from-me)
    ;; rotate and escape. init
    (unix:sleep 1)
    (setq target-theta-from-me (get-target-theta-from-me (send *ri* :state :worldcoords) (send target-world-pos :pos)))
    ;; add condition
    (ros::ros-info "Turning to the target by using go-velocity.")
    (while (> (abs target-theta-from-me) delta-th)
      (cond
        ((< target-theta-from-me 0) ;; When the robot is looking at the left side of the target
         (ros::ros-info "start recovery go-vel ~A" target-theta-from-me)
         (send *ri* :go-velocity 0 0 (* vel-rate target-theta-from-me)))
        ((> target-theta-from-me 0) ;; When the robot is looking at the right side of the target
         (ros::ros-info "start recovery go-vel ~A" target-theta-from-me)
         (send *ri* :go-velocity 0 0 (* vel-rate target-theta-from-me))))
      (unix:sleep 1)
      (setq target-theta-from-me (get-target-theta-from-me (send *ri* :state :worldcoords) (send target-world-pos :pos)))
      (ros::ros-info "target-theta-from-me: ~A" target-theta-from-me))))

(defun force-go-through-3f-auto-door(door x-vel times)
  (send *ri* :speak-jp "無理やり進みます")
  (let (target-world-pos via-world-pos)
    (cond
      ((= door 1)
       (setq target-world-pos *3f-auto-door-4-inv*)
       (setq via-world-pos *3f-auto-door-1-force*))
      ((= door 2)
       (setq target-world-pos *3f-auto-door-3-inv*)
       (setq via-world-pos *3f-auto-door-2-force*))
      ((= door 3)
       (setq target-world-pos *3f-auto-door-2-inv*)
       (setq via-world-pos *3f-auto-door-3-force*))
      ((= door 4)
       (setq target-world-pos *3f-auto-door-1-inv*)
       (setq via-world-pos *3f-auto-door-4-force*)))
    (ros::ros-info "go to via-world-pos")
    (change-dynamic-param :local-inflation-radius 0.3 :global-inflation-radius 0.3) ;; original min-vel-x -> 0.3 max-vel-x -> 0.6. I think these are not needed.
    (send *ri* :move-to via-world-pos :frame-id "/map" :retry 1)
    (turn-to-the-target target-world-pos 1 0.21)
    (ros::ros-warn "Caution! Go straight by force. vel:~Am/s times:~A" x-vel times)
    (send *ri* :speak-jp "無理やり進みます" :wait t)
    (dotimes (i times)
      (ros::ros-warn "go-velocity")
      (send *ri* :go-velocity x-vel 0 0))
    (turn-to-the-target target-world-pos 0.7 0.1)
    (send *ri* :go-velocity 0.2 0 0))
  (change-dynamic-param))

(defun go-to-office-kyoin()
  (send *ri* :clear-costmap)
  (send *ri* :speak-jp "事務室にむかいます" :wait t)
  (send *ri* :move-to (make-coords :pos #f(51100 -29876 0) :rpy (float-vector 0 0 0)) :frame-id "/map")
  )

(defun go-to-office()
  (unless (boundp '*ri*) (fetch-init))  
  (go-to-current-floor-elevator-hall)
  (get-on-and-off-eng2-elevator (get-current-floor) 3)
  (go-to-3f-auto-door 1)
  (move-torso-and-head-and-autodoor-open "/eng2/3f/new/autodoor/switch")
  ;; (send *ri* :speak-jp "自動ドアがあいたらすすんでと言ってください" :wait t)
  ;; (wait-for-julius-trigger "すすんで")
  (go-through-3f-auto-door)
  (switchbot-topic "/eng2/3f/new/autodoor/switch" "on")
  (go-to-3f-auto-door 2)
  (move-torso-and-autodoor-open "/eng2/3f/old/autodoor/switch")
  ;; (send *ri* :speak-jp "自動ドアがあいたらすすんでと言ってください" :wait t)
  ;; (wait-for-julius-trigger "すすんで")
  (force-go-through-3f-auto-door 2 0.5 3)
  (switchbot-topic "/eng2/3f/old/autodoor/switch" "on")
  (go-to-office-kyoin)
  (send *ri* :speak-jp "届け物をしにきました" :wait t)
  (send *ri* :speak-jp "受け取ったら，受け取りましたと言ってください" :wait t)
  (wait-for-julius-trigger "うけとりました")
  (send *ri* :speak-jp "戻ります" :wait t)
  (go-to-3f-auto-door 3)
  (move-torso-and-head-and-autodoor-open "/eng2/3f/old/autodoor/switch")
  ;; (send *ri* :speak-jp "自動ドアがあいたらすすんでと言ってください" :wait t)
  ;; (wait-for-julius-trigger "すすんで")
  (force-go-through-3f-auto-door 3 0.5 3)
  (switchbot-topic "/eng2/3f/old/autodoor/switch" "on")
  (go-to-3f-auto-door 4)
  (move-torso-and-head-and-autodoor-open "/eng2/3f/new/autodoor/switch")
  ;; (send *ri* :speak-jp "自動ドアがあいたらすすんでと言ってください" :wait t)
  ;; (wait-for-julius-trigger "すすんで")
  (go-through-3f-auto-door)
  (switchbot-topic "/eng2/3f/new/autodoor/switch" "on")
  )
